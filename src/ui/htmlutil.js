// Generated by CoffeeScript 2.7.0
(function() {
  //I am learning JS and want to implement this functionality by hand
  var ButtonGroup, Debouncer, E, ValidatingInput, addClass, idOrNull, removeClass;

  exports.flipSetTimeout = function(t, cb) {
    return setTimeout(cb, t);
  };

  exports.E = E = function(id) {
    return document.getElementById(id);
  };

  // Remove class from the element
  exports.removeClass = removeClass = function(e, c) {
    var ci;
    return e.className = ((function() {
      var j, len1, ref, results;
      ref = e.className.split(" ");
      results = [];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        ci = ref[j];
        if (c !== ci) {
          results.push(ci);
        }
      }
      return results;
    })()).join(" ");
  };

  exports.addClass = addClass = function(e, c) {
    var classes;
    return e.className = (classes = e.className) === "" ? c : classes + " " + c;
  };

  idOrNull = function(elem) {
    if (elem === null) {
      return null;
    } else {
      return elem.getAttribute("id");
    }
  };

  exports.ButtonGroup = ButtonGroup = class ButtonGroup {
    constructor(containerElem, tag, selectedId = null, selectedClass = "btn-selected") {
      var btn, j, len1, ref;
      this.selectedClass = selectedClass;
      if (selectedId !== null) {
        addClass((this.selected = E(selectedId)), this.selectedClass);
      } else {
        this.selected = null;
      }
      this.handlers = {
        change: []
      };
      ref = containerElem.getElementsByTagName(tag);
      for (j = 0, len1 = ref.length; j < len1; j++) {
        btn = ref[j];
        btn.addEventListener("click", this._btnClickListener(btn));
      }
      return;
    }

    _changeActiveButton(newBtn, e) {
      var handler, j, len1, newId, oldBtn, oldId, ref;
      newId = idOrNull(newBtn);
      oldBtn = this.selected;
      oldId = idOrNull(oldBtn);
      if (newId !== oldId) {
        if (oldBtn !== null) {
          removeClass(oldBtn, this.selectedClass);
        }
        if (newBtn !== null) {
          addClass(newBtn, this.selectedClass);
        }
        this.selected = newBtn;
        ref = this.handlers.change;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          handler = ref[j];
          handler(e, newId, oldId);
        }
      }
    }

    _btnClickListener(newBtn) {
      return (e) => {
        return this._changeActiveButton(newBtn, e);
      };
    }

    addEventListener(name, handler) {
      var handlers;
      if ((handlers = this.handlers[name]) == null) {
        throw new Error(`Hander ${name} is not supported`);
      }
      return handlers.push(handler);
    }

    setButton(newId) {
      if (newId === null) {
        return this._changeActiveButton(null, null);
      } else {
        return this._changeActiveButton(document.getElementById(newId), null);
      }
    }

  };

  exports.windowWidth = function() {
    //http://stackoverflow.com/questions/3437786/get-the-size-of-the-screen-current-web-page-and-browser-window
    return window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
  };

  exports.windowHeight = function() {
    return window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
  };

  exports.documentWidth = function() {
    return document.documentElement.scrollWidth || document.body.scrollWidth;
  };

  if (HTMLCanvasElement.prototype.toBlob == null) {
    Object.defineProperty(HTMLCanvasElement.prototype, 'toBlob', {
      value: function(callback, type, quality) {
        var arr, binStr, i, j, len, ref;
        binStr = atob(this.toDataURL(type, quality).split(',')[1]);
        len = binStr.length;
        arr = new Uint8Array(len);
        for (i = j = 0, ref = len; j < ref; i = j += 1) {
          arr[i] = binStr.charCodeAt(i);
        }
        return callback(new Blob([arr], {
          type: type || 'image/png'
        }));
      }
    });
  }

  exports.Debouncer = Debouncer = class Debouncer {
    constructor(timeout, callback1) {
      this.timeout = timeout;
      this.callback = callback1;
      this.timer = null;
    }

    fire() {
      if (this.timer) {
        clearTimeout(this.timer);
      }
      return this.timer = setTimeout((() => {
        return this.onTimer();
      }), this.timeout);
    }

    onTimer() {
      this.timer = null;
      return this.callback();
    }

  };

  exports.getAjax = function() {
    if (window.XMLHttpRequest != null) {
      return new XMLHttpRequest();
    } else if (window.ActiveXObject != null) {
      return new ActiveXObject("Microsoft.XMLHTTP");
    }
  };

  exports.ValidatingInput = ValidatingInput = class ValidatingInput {
    constructor(element, parseValue, stringifyValue, value, stateStyleClasses = {
        ok: "input-ok",
        error: "input-bad",
        modified: "input-editing"
      }) {
      this.element = element;
      this.parseValue = parseValue;
      this.stringifyValue = stringifyValue;
      this.stateStyleClasses = stateStyleClasses;
      this.message = null;
      if (value != null) {
        this.setValue(value);
      } else {
        this._modified();
      }
      this.onparsed = null;
      this.element.addEventListener("reset", (e) => {
        console.log("reset");
        return this._reset();
      });
      this.element.addEventListener("keydown", (e) => {
        if (e.keyCode === 27) {
          console.log("Esc");
          e.preventDefault();
          return this._reset();
        }
      });
      this.element.addEventListener("change", (e) => {
        console.log("changed");
        return this._modified();
      });
      this.element.addEventListener("blur", (e) => {
        console.log("blur");
        return this._exit();
      });
      this.element.addEventListener("input", (e) => {
        console.log("input");
        return this._editing();
      });
    }

    setValue(val) {
      var newText;
      this.value = val;
      newText = this.stringifyValue(val);
      this.element.value = newText;
      return this._setClass(this.stateStyleClasses.ok);
    }

    revalidate() {
      return this._parse();
    }

    _reset() {
      return this.setValue(this.value);
    }

    _exit() {
      if (this.message != null) {
        return this._reset();
      }
    }

    _editing() {
      this._setMessage(null);
      return this._setClass(this.stateStyleClasses.modified);
    }

    _setMessage(msg) {
      if (msg != null) {
        console.log(msg);
      }
      return this.message = msg;
    }

    _setClass(cls) {
      removeClass(this.element, this.stateStyleClasses.ok);
      removeClass(this.element, this.stateStyleClasses.error);
      removeClass(this.element, this.stateStyleClasses.modified);
      return addClass(this.element, cls);
    }

    _parse() {
      var e, newVal;
      try {
        newVal = this.parseValue(this.element.value);
        if (newVal != null) {
          this.value = newVal;
        } else {
          throw new Error("parse function returned no value");
        }
        this._setMessage(null);
        this._setClass(this.stateStyleClasses.ok);
        return true;
      } catch (error) {
        e = error;
        this._setMessage(`Failed to parse value: ${e}`);
        this._setClass(this.stateStyleClasses.error);
        return false;
      }
    }

    _modified() {
      if (this._parse()) {
        return typeof this.onparsed === "function" ? this.onparsed(this.value) : void 0;
      }
    }

  };

}).call(this);
