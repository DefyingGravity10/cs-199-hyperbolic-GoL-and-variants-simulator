// Generated by CoffeeScript 2.7.0
(function () {
  var fminsearch, fminsearch1, near, runtest;

  fminsearch = require("./fminsearch.js");

  fminsearch1 = require("./Fminsearch.js");

  near = function (x, y, eps = 1e-5) {
    return Math.abs(x - y) < eps;
  };

  runtest = function () {
    var _,
      eps,
      func,
      initialSamples,
      makeInitialPoint,
      maxiter,
      measurePerformance,
      penalty,
      randRange,
      res,
      sampleSize,
      step;
    sampleSize = 10000;
    //use rozenbrock for test
    func = function ([x, y]) {
      return (1 - x) ** 2 + 100 * (y - x ** 2) ** 2;
    };
    //func = ([x,y]) -> (1-x)**2 + 2*(1-y)**2
    randRange = function (a, b) {
      return Math.random() * (b - a) + a;
    };
    makeInitialPoint = function () {
      return [randRange(-5, 5), randRange(-5, 5)];
    };
    initialSamples = (function () {
      var i, ref, results;
      results = [];
      for (_ = i = 0, ref = sampleSize; i < ref; _ = i += 1) {
        results.push(makeInitialPoint());
      }
      return results;
    })();
    penalty = 10000;
    step = 1.0;
    eps = 1e-5;
    maxiter = 1000;
    measurePerformance = function ([alpha, beta, gamma]) {
      var i, len, price, res, success, x0;
      fminsearch.alpha = alpha;
      fminsearch.beta = beta;
      fminsearch.gamma = gamma;
      price = 0;
      success = 0;
      for (i = 0, len = initialSamples.length; i < len; i++) {
        x0 = initialSamples[i];
        res = fminsearch.fminsearch(func, x0, step, eps, maxiter);
        price += res.evaluations;
        if (!res.reached) {
          price += penalty;
          continue;
        }
        if (!(near(res.x[0], 1.0, eps * 10) && near(res.x[1], 1.0, eps * 10))) {
          price += penalty;
          continue;
        }
        success += 1;
      }
      price /= sampleSize;
      console.log(
        `ABG: ${JSON.stringify([alpha, beta, gamma])} price: ${price} success ratio: ${success / initialSamples.length}`
      );
      return price;
    };
    //for abg in [[2.0,0.5,0.5], [30.0,0.5,0.5], [2.0,0.3,0.5], [2.0,0.5,0.2]]
    //  console.log "===testing ABG:"
    //  console.dir abg
    //  console.log "price: #{measurePerformance abg}"
    fminsearch.alpha = 1000;
    if (fminsearch1.alpha === 1000) {
      throw new Error("modules not separate");
    }
    console.log("Trying to find an optimal performace");
    res = fminsearch1.fminsearch(measurePerformance, [2.0, 0.5, 0.5], 0.1, 0.01);
    console.log("Found best parameters:");
    return console.dir(res);
  };

  runtest();
}).call(this);
